from helpers import XORString

BLOCKSIZE = 368

PERMUTATIONS = [
    [48, 84, 27, 2, 140, 72, 49, 112, 161, 14, 73, 89, 81, 37, 53, 110, 178, 115, 42, 103, 67, 44, 153, 157, 6, 5, 11, 58, 181, 125, 165, 182, 39, 179, 127, 183, 77, 70, 149, 159, 93, 1, 138, 75, 41, 113, 61, 158, 33, 9, 15, 25, 160, 104, 122, 45, 107, 57, 71, 64, 146, 12, 46, 50, 111, 176, 20, 83, 87, 60, 31, 118, 154, 24, 94, 117, 134, 18, 69, 86, 143, 136, 98, 21, 152, 109, 144, 43, 177, 169, 108, 0, 105, 3, 135, 40, 97, 62, 151, 51, 28, 170, 32, 85, 66, 30, 128, 80, 19, 4, 168, 90, 16, 65, 180, 36, 35, 92, 7, 29, 120, 34, 79, 82, 55, 99, 167, 124, 175, 106, 10, 129, 52, 47, 137, 100, 63, 148, 102, 139, 74, 162, 114, 166, 150, 142, 116, 17, 171, 56, 13, 121, 163, 173, 130, 101, 23, 8, 172, 145, 38, 132, 156, 119, 54, 164, 174, 131, 96, 155, 95, 22, 68, 26, 133, 88, 141, 78, 91, 76, 123, 147, 126, 59],
    [37, 18, 180, 25, 32, 45, 142, 107, 134, 0, 97, 105, 44, 100, 7, 155, 36, 86, 115, 159, 89, 177, 42, 104, 67, 116, 169, 53, 72, 121, 108, 74, 43, 30, 118, 29, 127, 109, 63, 55, 179, 78, 27, 168, 135, 144, 4, 112, 15, 182, 50, 95, 181, 3, 39, 103, 80, 14, 166, 172, 11, 58, 1, 75, 84, 24, 102, 167, 149, 165, 136, 68, 79, 129, 12, 49, 6, 73, 160, 123, 125, 153, 20, 124, 87, 22, 88, 60, 131, 82, 83, 178, 156, 101, 154, 98, 99, 96, 91, 59, 152, 33, 28, 61, 47, 81, 106, 122, 51, 145, 26, 10, 120, 138, 17, 174, 76, 140, 150, 9, 173, 56, 158, 163, 35, 94, 143, 19, 137, 176, 157, 93, 71, 170, 110, 119, 132, 139, 130, 147, 161, 85, 52, 21, 23, 114, 64, 41, 66, 31, 77, 151, 57, 175, 126, 146, 164, 133, 183, 65, 111, 171, 148, 13, 38, 2, 113, 48, 128, 141, 70, 8, 46, 5, 162, 117, 90, 40, 54, 16, 34, 69, 92, 62]
]

def f(m, k):

    pm = "".join([m[pi-1] for pi in PERMUTATIONS[0]])

    o = XORString(pm, k)

    return "".join([o[pi-1] for pi in PERMUTATIONS[1]])

# Feistel cipher with two rounds 

# def encrypt(message, key):

#     L1 = message[:int(BLOCKSIZE/2)]
#     R1 = message[int(BLOCKSIZE/2):]

#     L2 = XORString(f(L1, key[:int(BLOCKSIZE/2)]), R1)
#     R2 = L1

#     L3 = XORString(f(L2, key[int(BLOCKSIZE/2):]), R2)
#     R3 = L2

#     return L3 + R3

def decrypt(cipher, key):

    L1 = cipher[int(BLOCKSIZE/2):]
    R1 = cipher[:int(BLOCKSIZE/2)]

    L2 = XORString(f(L1, key[int(BLOCKSIZE/2):]), R1)
    R2 = L1

    L3 = XORString(f(L2, key[:int(BLOCKSIZE/2)]), R2)
    R3 = L2

    return R3 + L3